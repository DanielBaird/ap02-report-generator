// Generated by CoffeeScript 1.3.3

define(['jquery', 'underscore', 'backbone', 'showdown', 'bifocal/collections/regions', 'bifocal/collections/regiontypes', 'ra'], function($, _, Backbone, Showdown, Regions, RegionTypes, RA) {
  var AppView;
  AppView = Backbone.View.extend({
    events: {
      'click #generate': 'startReport',
      'change select': 'changeRegion',
      'change input[type=radio].rtype': 'changeRegionType'
    },
    initialize: function() {
      this.region_types = new RegionTypes(window.region_type_list);
      this.regions = new Regions(window.region_list);
      return _.bindAll(this);
    },
    render: function() {
      var me, type_choices;
      me = this;
      type_choices = [];
      this.region_types.each(function(rt) {
        var info, region_list;
        region_list = [];
        me.regions.each(function(r) {
          if (r.get('region_type_regiontype') === rt.get('regiontype')) {
            return region_list.push(AppView.region_choice(r.attributes));
          }
        });
        info = _.extend({
          regions: region_list.join('')
        }, rt.attributes);
        return type_choices.push(AppView.type_choice(info));
      });
      this.html_type_chooser = AppView.type_chooser({
        regiontypes: type_choices.join('')
      });
      this.form_content = this.html_type_chooser;
      this.html_form = AppView.form({
        formcontent: this.form_content
      });
      this.$el.append($(this.html_form));
      this.$el.append($('<div id="report"></div>'));
      this.updateReportButton();
      return $('body').append(this.$el);
    },
    changeRegionType: function() {
      var selected_region_type;
      selected_region_type = this.$('.rtype:checked').val();
      $('#chosen_' + selected_region_type).show('fast');
      this.$('.rtype').not(':checked').each(function(i, elem) {
        return $('#chosen_' + $(elem).val()).hide('fast');
      });
      return this.changeRegion({
        srcElement: $('#chosen_' + selected_region_type)
      });
    },
    changeRegion: function(e) {
      this.selected_region = $(e.srcElement).val();
      if (this.selected_region === "invalid") {
        this.selected_region = null;
      }
      return this.updateReportButton();
    },
    updateReportButton: function() {
      if (this.selected_region) {
        return this.$('#generate').show('fast');
      } else {
        return this.$('#generate').hide('fast');
      }
    },
    startReport: function() {
      this.$('#report').empty();
      this.data = null;
      this.fetchData();
      if (this.doc) {
        this.progress;
      } else {
        this.fetchDoc();
      }
      return false;
    },
    fetchData: function() {
      var data_url, the_region;
      if (this.data) {
        return this.progress;
      } else {
        the_region = this.regions.get(this.selected_region);
        data_url = [window.settings.dataUrlPrefix, "regions/", the_region.get('region_type_regiontype'), "_", the_region.get('name').replace(/[^A-Za-z0-9-]/g, '_'), "/data.json"].join("");
        return $.ajax(data_url, {
          context: this,
          dataType: 'json',
          success: function(data) {
            this.data = data;
            return this.progress();
          },
          error: function() {
            return console.log("oops didn't get data");
          }
        });
      }
    },
    fetchDoc: function() {
      var doc_url;
      if (this.doc) {
        return this.progress;
      } else {
        doc_url = window.settings.dataUrlPrefix + "sourcedoc.txt";
        return $.ajax(doc_url, {
          context: this,
          dataType: 'text',
          success: function(data) {
            this.doc = data;
            return this.progress();
          },
          error: function() {
            return console.log("oops didn't get doc");
          }
        });
      }
    },
    progress: function() {
      if (this.doc && this.data) {
        console.log(["producing report with: ", this.data]);
        return this.generateReport();
      }
    },
    generateReport: function() {
      var resolution;
      resolution = RA.resolve(this.doc, this.data);
      return this.$('#report').append(new Showdown.converter().makeHtml(resolution));
    }
  }, {
    form: _.template("<form id=\"kickoffform\">\n    <%= formcontent %>\n    <div class=\"onefield gobutton\">\n        <button id=\"generate\">generate report</button>\n    </div>\n</form>"),
    type_chooser: _.template("<div class=\"onefield regiontypeselection\">\n    <%= regiontypes %>\n</div>"),
    type_choice: _.template("<div class=\"regiontypeselector\">\n    <label><input type=\"radio\" class=\"rtype\" name=\"regiontyperadio\"\n            value=\"<%= regiontype %>\"><%= regiontypename_plural %></label>\n    <select name=\"chosen_<%= regiontype %>\" id=\"chosen_<%= regiontype %>\">\n        <option disabled=\"disabled\" selected=\"selected\" value=\"invalid\">choose <%= regiontypename_singular %>...</option>\n        <%= regions %>\n    </select>\n</div>"),
    region_choice: _.template("<option value=\"<%= id %>\"><%= name %></option>")
  });
  return AppView;
});
